// import java.awt.*;
// import java.awt.event.*;

// public class game {
//     public static void main(String[] args) {
//         Frame frame = new Frame("Game");
//         frame.setSize(400, 400);
//         frame.setLayout(null);

//         Button btnRight = new Button("Right");
//         Button btnLeft = new Button("Left");
//         Button btnBottom = new Button("Bottom");
//         Button btnTop = new Button("Top");

//         btnTop.setBounds(150,50,100,30);
//         btnBottom.setBounds(150,300,100,30);
//         btnRight.setBounds(300,200,100,30);
//         btnLeft.setBounds(30,200,100,30);

//         Panel panel = new Panel(null);
//         panel.setBounds(150, 150, 100, 100);
//         panel.setBackground(Color.RED);

//         frame.add(btnRight);
//         frame.add(btnLeft);
//         frame.add(btnBottom);
//         frame.add(btnTop);
//         frame.add(panel);

//         // Event handling for buttons
//         btnRight.addActionListener(new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 panel.setLocation(panel.getX() + 10, panel.getY());
//             }
//         });

//         btnLeft.addActionListener(new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 panel.setLocation(panel.getX() - 10, panel.getY());
//             }
//         });

//         btnBottom.addActionListener(new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 panel.setLocation(panel.getX(), panel.getY() + 10);
//             }
//         });

//         btnTop.addActionListener(new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 panel.setLocation(panel.getX(), panel.getY() - 10);
//             }
//         });

//         frame.addWindowListener(new WindowAdapter() {
//             @Override
//             public void windowClosing(WindowEvent e) {
//                 frame.dispose();
//             }
//         });

//         frame.setVisible(true);
//     }
// }


// import java.awt.*;
// import java.awt.event.*;
// import java.util.Random;

// public class game {
//     public static void main(String[] args) {
//         Frame frame = new Frame("Interactive Game");
//         frame.setSize(600, 600);
//         frame.setLayout(null); // Explicitly set layout to null for manual positioning.

//         Label scoreLabel = new Label("Score: 0");
//         scoreLabel.setBounds(20, 50, 100, 30);
//         frame.add(scoreLabel);

//         Random random = new Random();
//         final int[] playerX = {250};
//         final int[] playerY = {250};
//         final int[] targetX = {random.nextInt(550)};
//         final int[] targetY = {random.nextInt(450)};
//         final int[] score = {0};

//         Canvas canvas = new Canvas() {
//             @Override
//             public void paint(Graphics g) {
//                 g.setColor(Color.GREEN);
//                 g.fillRect(targetX[0], targetY[0], 50, 50); // Draw target
//                 g.setColor(Color.RED);
//                 g.fillRect(playerX[0], playerY[0], 50, 50); // Draw player
//             }
//         };
//         canvas.setBounds(0, 0, 600, 500); // Adjusted size to avoid overlapping buttons.
//         frame.add(canvas);

//         // Create movement buttons
//         Button btnRight = new Button("Right");
//         Button btnLeft = new Button("Left");
//         Button btnDown = new Button("Down");
//         Button btnUp = new Button("Up");

//         // Set button positions
//         btnUp.setBounds(250, 510, 100, 30);
//         btnDown.setBounds(250, 550, 100, 30);
//         btnRight.setBounds(360, 530, 100, 30);
//         btnLeft.setBounds(140, 530, 100, 30);

//         // Add buttons to the frame
//         frame.add(btnRight);
//         frame.add(btnLeft);
//         frame.add(btnDown);
//         frame.add(btnUp);

//         // Add button functionality
//         ActionListener moveListener = new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 if (e.getSource() == btnRight && playerX[0] + 60 < frame.getWidth()) {
//                     playerX[0] += 10;
//                 } else if (e.getSource() == btnLeft && playerX[0] > 0) {
//                     playerX[0] -= 10;
//                 } else if (e.getSource() == btnDown && playerY[0] + 60 < canvas.getHeight()) {
//                     playerY[0] += 10;
//                 } else if (e.getSource() == btnUp && playerY[0] > 0) {
//                     playerY[0] -= 10;
//                 }

//                 // Check for collision with the target
//                 if (Math.abs(playerX[0] - targetX[0]) < 50 && Math.abs(playerY[0] - targetY[0]) < 50) {
//                     score[0] += 10;
//                     scoreLabel.setText("Score: " + score[0]);
//                     targetX[0] = random.nextInt(550);
//                     targetY[0] = random.nextInt(450);
//                 }
//                 canvas.repaint();
//             }
//         };

//         btnRight.addActionListener(moveListener);
//         btnLeft.addActionListener(moveListener);
//         btnDown.addActionListener(moveListener);
//         btnUp.addActionListener(moveListener);

//         // Close button
//         frame.addWindowListener(new WindowAdapter() {
//             @Override
//             public void windowClosing(WindowEvent e) {
//                 frame.dispose();
//             }
//         });

//         frame.setVisible(true);
//     }
// }




import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.Timer;

public class SnakeGame {
    public static void main(String[] args) {
        Frame frame = new Frame("Interactive Snake Game");
        frame.setSize(600, 600);
        frame.setLayout(null);

        Label scoreLabel = new Label("Score: 0");
        scoreLabel.setBounds(20, 50, 100, 30);
        frame.add(scoreLabel);

        Random random = new Random();
        final int blockSize = 50;

        ArrayList<Point> snake = new ArrayList<>();
        snake.add(new Point(250, 250));

        Point target = new Point(random.nextInt(11) * blockSize, random.nextInt(9) * blockSize);
        final int[] score = {0};
        final int[] direction = {KeyEvent.VK_RIGHT};

        Canvas canvas = new Canvas() {
            @Override
            public void paint(Graphics g) {
                g.setColor(Color.GREEN);
                g.fillRect(target.x, target.y, blockSize, blockSize);

                g.setColor(Color.RED);
                for (Point segment : snake) {
                    g.fillRect(segment.x, segment.y, blockSize, blockSize);
                }
            }
        };
        canvas.setBounds(0, 100, 600, 500);
        frame.add(canvas);

        frame.setFocusable(true);
        frame.requestFocus();
        frame.requestFocusInWindow();

        frame.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                        if (direction[0] != KeyEvent.VK_DOWN) direction[0] = KeyEvent.VK_UP;
                        break;
                    case KeyEvent.VK_DOWN:
                        if (direction[0] != KeyEvent.VK_UP) direction[0] = KeyEvent.VK_DOWN;
                        break;
                    case KeyEvent.VK_LEFT:
                        if (direction[0] != KeyEvent.VK_RIGHT) direction[0] = KeyEvent.VK_LEFT;
                        break;
                    case KeyEvent.VK_RIGHT:
                        if (direction[0] != KeyEvent.VK_LEFT) direction[0] = KeyEvent.VK_RIGHT;
                        break;
                }
            }
        });

        Timer timer = new Timer(300, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Point head = snake.get(0);
                Point newHead = new Point(head);

                switch (direction[0]) {
                    case KeyEvent.VK_RIGHT: newHead.x += blockSize; break;
                    case KeyEvent.VK_LEFT: newHead.x -= blockSize; break;
                    case KeyEvent.VK_DOWN: newHead.y += blockSize; break;
                    case KeyEvent.VK_UP: newHead.y -= blockSize; break;
                }

                if (newHead.x < 0 || newHead.x >= canvas.getWidth() || newHead.y < 0 || newHead.y >= canvas.getHeight()) {
                    System.out.println("Game Over! You hit the wall.");
                    ((Timer) e.getSource()).stop();
                    frame.dispose();
                    return;
                }

                for (Point segment : snake) {
                    if (segment.equals(newHead)) {
                        System.out.println("Game Over! You collided with yourself.");
                        ((Timer) e.getSource()).stop();
                        frame.dispose();
                        return;
                    }
                }

                snake.add(0, newHead);
                if (newHead.equals(target)) {
                    score[0] += 10;
                    scoreLabel.setText("Score: " + score[0]);
                    target.setLocation(random.nextInt(11) * blockSize, random.nextInt(9) * blockSize);
                } else {
                    snake.remove(snake.size() - 1);
                }

                canvas.repaint();
            }
        });
        timer.start();

        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                frame.dispose();
            }
        });

        frame.setVisible(true);
    }
}

